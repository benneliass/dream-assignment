name: Build and Deploy Docker Image

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: my-dream-flask
  TERRAFORM_WORKING_DIRECTORY: terraform
  APP_PORT: 5000

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get version from file
        id: get_version
        run: echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.VERSION }} -t ${{ secrets.DOCKERHUB_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest .

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKERHUB_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image with version tag
        run: docker push ${{ secrets.DOCKERHUB_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.VERSION }}

      - name: Push Docker image with latest tag
        run: docker push ${{ secrets.DOCKERHUB_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false 

      - name: Initialize Terraform
        run: terraform init
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}

      - name: Apply Terraform
        run: terraform apply -auto-approve
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
          TF_VAR_dockerhub_token: ${{ secrets.DOCKERHUB_TOKEN }}
          TF_VAR_dockerhub_registry: ${{ secrets.DOCKERHUB_REGISTRY }}
          TF_VAR_dockerhub_repository: ${{ env.DOCKER_IMAGE_NAME }}
          TF_VAR_dockerhub_tag: ${{ env.VERSION }}
          TF_VAR_app_port: ${{ env.APP_PORT }}

      - name: Wait for Flask App to Respond
        run: |
          PUBLIC_IP=$(terraform output -raw public_ip)
          while ! curl -s "http://$PUBLIC_IP:${{ env.APP_PORT }}" > /dev/null; do
            echo "Waiting for the Flask app to be available at http://$PUBLIC_IP:${{ env.APP_PORT }}..."
            sleep 10
          done
          echo "Flask app is up and running at http://$PUBLIC_IP:${{ env.APP_PORT }}"
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}